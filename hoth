#!/usr/bin/env node

var fs = require('fs');

if (process.argv[2] === '--help' || process.argv[2] === '-h') {
  console.log('Usage: node hoth.js [--port <port>] [ config.json ]');
  return;
}

var bcrypt = require('bcryptjs');

var CONFIG = JSON.parse(fs.readFileSync(__dirname + '/default.json'));

var argi = 2;
while (argi < process.argv.length) {
  if (process.argv[argi] === '--port') {
    argi++;
    CONFIG.port = Number(process.argv[argi]);
  } else if (process.argv[argi].slice(2) !== '--') {
    var overrides = JSON.parse(fs.readFileSync(process.argv[2]));
    for (var key in overrides) if (Object.prototype.hasOwnProperty.call(overrides, key)) {
      CONFIG[key] = overrides[key];
    }
  } else {
    console.error('Unknown option ' + process.argv[argi]);
  }
  argi++;
}

var mongoose = require('mongoose');
var ObjectId = mongoose.Schema.Types.ObjectId;
mongoose.connect('mongodb://'+CONFIG.mongoHost+':'+CONFIG.mongoPort+'/hoth');

var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {

  var userSchema = mongoose.Schema({
    name: String,
    id: Number,
    hash: String
  });

  userSchema.statics.findByName = function(name, cb) {
    this.findOne({ name: name }, cb);
  };

  userSchema.methods.toJSON = function() {
    return {
      name: this.name,
      id: this._id
    };
  };

  var userTokenSchema = mongoose.Schema({
    name: String,
    token: String
  });

  var TOKEN_CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  function genToken() {
    var s = '';
    for (var i = 0; i < 32; i++) {
      s += TOKEN_CHARS[Math.random() * TOKEN_CHARS.length | 0];
    }
    return s;
  }

  userTokenSchema.statics.create = function(name, cb) {
    new UserToken({
      name: name,
      token: genToken()
    }).save(cb);
  };

  userTokenSchema.methods.refresh = function(cb) {
    this.token = genToken();
    this.save(cb);
  };

  var threadSchema = mongoose.Schema({
    name: String,
    messages: [{ type: ObjectId, ref: 'Message' }]
  });

  threadSchema.statics.findBySpec = function(spec, cb) {
    if (spec.charAt(0) === '#') {
      Thread.findOne({ name: spec.slice(1) }, function(err, thread) {
        if (err) return cb(err);
        if (thread) return cb(null, thread);
        new Thread({
          name: spec.slice(1),
          messages: []
        }).save(function(err, thread) {
          cb(null, thread);
        });
      });
    } else if (spec.charAt(0) === '!') {
      Thread.findById(spec.slice(1), cb);
    } else {
      cb('bad thread spec');
    }
  };

  threadSchema.statics.queryBySpec = function(spec) {
    return spec.charAt(0) === '#' ? Thread.findOne({ name: spec.slice(1) }) :
      spec.charAt(0) === '!' ? Thread.findById(spec.slice(1)) : null;
  };

  var messageSchema = mongoose.Schema({
    type: { type: String, enum: 'chat system'.split(' ') },
    author: { type: ObjectId, ref: 'User' },
    body: String,
    sent: { type: Date, default: Date.now }
  });

  messageSchema.methods.toJSON = function() {
    return {
      id: this._id,
      type: this.type,
      author: this.author,
      body: this.body,
      sent: this.sent
    };
  };

  var User = mongoose.model('User', userSchema);
  var UserToken = mongoose.model('UserToken', userTokenSchema);
  var Thread = mongoose.model('Thread', threadSchema);
  var Message = mongoose.model('Message', messageSchema);

  if (CONFIG.useTLS) {
    var app = require('https').createServer({
      key: fs.readFileSync('private/key.pem'),
      cert: fs.readFileSync('private/cert.pem')
    }, handler);
  } else {
    var app = require('http').createServer(handler);
  }
  app.listen(CONFIG.port);

  var io = require('socket.io').listen(app);

  var STATIC = {
    '/': 'app.html',
    '/app.css': 'app.css',
    '/app.js': 'app.js'
  };

  function handler(req, res) {
    if (req.method === 'GET') {

      if (!STATIC[req.url]) {
        res.writeHead(404);
        return res.end('Not found');
      }

      fs.readFile(__dirname + '/static/' + STATIC[req.url], function(err, data) {
        if (err) {
          res.writeHead(500);
          return res.end('Internal error');
        }

        res.writeHead(200);
        res.end(data);
      });

    } else if (req.method === 'HEAD') {

      res.writeHead(STATIC[req.url] ? 200 : 404);
      res.end();

    } else {
      res.writeHead(500);
      res.end('Unsupported method');
    }
  }

  io.sockets.on('connection', function(socket) {

    socket.currentUser = null;

    function signIn(remember, user, cb) {
      socket.currentUser = user;
      if (remember) {
        UserToken.create(user.name, function(err, tuple) {
          if (err) return handleError(err, cb);
          cb(null, {
            user: user.toJSON(),
            token: tuple.token
          });
        });
      } else {
        cb(null, {
          user: user.toJSON(),
          token: null
        });
      }
      hasUser();
    }

    function handleError(err, cb) {
      console.log(err);
      if (cb) cb('internal error');
    }

    socket.on('sign in', function(data, cb) {
      if (socket.currentUser) return cb('already signed in');

      if (data.token) {
        UserToken.findOne({ name: data.name, token: data.token }, function(err, tuple) {
          if (err) return handleError(err, cb);
          if (!tuple) return cb('invalid token');
          tuple.refresh(function(err, tuple) {
            if (err) return handleError(err, cb);
            User.findByName(data.name, function(err, user) {
              if (err) return handleError(err, cb);
              socket.currentUser = user;
              cb(null, {
                user: user.toJSON(),
                token: tuple.token
              });
              hasUser();
            });
          });
        });
      } else {
        User.findByName(data.name, function(err, user) {
          if (err || !user) return cb('authentication failed');
          bcrypt.compare(data.password, user.hash, function(err, res) {
            if (err) return handleError(err, cb);
            if (res) {
              signIn(data.remember, user, cb);
            } else {
              cb('authentication failed');
            }
          });
        });
      }
    });

    socket.on('create account', function(data, cb) {
      if (socket.currentUser) return cb('already signed in');

      if (!data.name) return cb('bad username');
      if (data.password.length < CONFIG.minPasswordLength) {
        return cb({ type: 'passwordTooShort', min: CONFIG.minPasswordLength });
      }

      User.findByName(data.name, function(err, user) {
        if (user) return cb('user already exists');
        bcrypt.genSalt(10, function(err, salt) {
          if (err) return handleError(err, cb);
          bcrypt.hash(data.password, salt, function(err, hash) {
            if (err) return handleError(err, cb);
            new User({
              name: data.name,
              hash: hash
            }).save(function(err, user) {
              if (err) return handleError(err, cb);
              signIn(data.remember, user, cb);
            });
          });
        });
      });
    });

    socket.on('init', function() {
      if (CONFIG.motd) {
        socket.emit('system', {
          thread: '#lobby',
          body: CONFIG.motd
        });
      }
    });

    socket.on('user', function(id, cb) {
      User.findById(id, function(err, user) {
        if (err) return handleError(err, cb);
        if (!user) return cb('user not found');
        cb(null, user.toJSON());
      });
    });

    socket.on('user list', function(cb) {
      var users = {};
      io.sockets.clients().forEach(function(client) {
        if (client.currentUser) users[client.currentUser.name] = true;
      });
      cb(null, Object.keys(users));
    });

    socket.on('thread length', function(data, cb) {
      Thread.queryBySpec(data.thread).exec(function(err, thread) {
        if (err) return handleError(err, cb);
        cb(null, thread ? thread.messages.length : 0);
      });
    });

    socket.on('thread history', function(data, cb) {
      if (data.length > 100 || data.length <= 0) {
        return cb('invalid length');
      }

      var query = Thread.queryBySpec(data.thread);

      if (query) {
        query
          .slice('messages', [data.offset, data.length])
          .populate('messages')
          .exec(function(err, thread) {
            if (err) return handleError(err, cb);
            cb(null, thread ? thread.messages : []);
          });
      }
    });

    function append(thread, message) {
      Thread.findBySpec(thread, function(err, thread) {
        if (err) return handleError(err);
        message.save(function(err, message) {
          if (err) return handleError(err);
          thread.messages.push(message);
          thread.save(function(err) {
            if (err) return handleError(err);
          });
        });
      })
    }

    function hasUser() {

      socket.broadcast.emit('user join', socket.currentUser.name);

      socket.on('chat', function(data) {
        socket.broadcast.emit('chat', data);
        socket.broadcast.emit('open thread', data.thread);
        append(data.thread, new Message({
          type: 'chat',
          author: socket.currentUser._id,
          body: data.body
        }));
      });

      socket.on('system', function(data) {
        socket.broadcast.emit('system', data);
        socket.broadcast.emit('open thread', data.thread);
        append(data.thread, new Message({
          type: 'system',
          author: null,
          body: data.body
        }));
      });

      socket.on('open thread', function(spec) {
        socket.broadcast.emit('open thread', spec);
      });

      socket.on('create thread', function(cb) {
        new Thread({
          messages: []
        }).save(function(err, thread) {
          socket.broadcast.emit('open thread', '!' + thread._id);
          cb(null, thread._id);
        });
      });

      socket.on('disconnect', function() {
        socket.broadcast.emit('user leave', socket.currentUser.name);
      });

    }

  });

});
